# Generated by Django 5.2.6 on 2025-09-23 19:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MaintenanceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requester_name', models.CharField(max_length=100, verbose_name='Nome do Solicitante')),
                ('request_date', models.DateField(auto_now_add=True, verbose_name='Data da Requisição')),
                ('request_time', models.TimeField(auto_now_add=True, verbose_name='Hora da Requisição')),
                ('department', models.CharField(max_length=100, verbose_name='Setor')),
                ('maintenance_type', models.CharField(choices=[('eletrica', 'Elétrica'), ('mecanica', 'Mecânica'), ('outros', 'Outros')], max_length=20, verbose_name='Tipo de Manutenção')),
                ('equipment_status', models.CharField(choices=[('funcionando', 'Funcionando'), ('alerta', 'Alerta'), ('inoperante', 'Inoperante')], max_length=20, verbose_name='Status do Equipamento')),
                ('equipment_location_press', models.CharField(blank=True, max_length=100, null=True, verbose_name='Prensa')),
                ('equipment_location_press_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nº da Prensa')),
                ('equipment_location_thread', models.CharField(blank=True, max_length=100, null=True, verbose_name='Rosca')),
                ('equipment_location_thread_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nº da Rosca')),
                ('equipment_location_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='Outros (Localização)')),
                ('equipment_location_other_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nº (Outros)')),
                ('problem_description', models.TextField(verbose_name='O que está ocorrendo?')),
                ('status', models.CharField(choices=[('aberto', 'Aberto'), ('em_andamento', 'Em Andamento'), ('concluido', 'Concluído')], default='aberto', max_length=20, verbose_name='Status')),
                ('technician_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome do Técnico')),
                ('start_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Início da Execução')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Fim da Execução')),
                ('resolution_notes', models.TextField(blank=True, null=True, verbose_name='Descrição da Manutenção Executada')),
            ],
            options={
                'verbose_name': 'Requisição de Manutenção',
                'verbose_name_plural': 'Requisições de Manutenção',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(blank=True, choices=[('operator', 'Operator'), ('maintenance', 'Maintenance')], max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
